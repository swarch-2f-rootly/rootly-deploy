# Rootly Platform - Unified Docker Compose
# This docker-compose file orchestrates all services in the agricultural monitoring platform:
# - InfluxDB (time series database)
# - MinIO (object storage)
# - PostgreSQL (relational database)
# - Analytics Backend (Python)
# - Authentication Backend (Python)
# - Data Management Backend (Go)
# - User Plant Management Backend (Python)
# - Frontend (React)
services:
  # InfluxDB - Time Series Database (Shared by both backends)
  influxdb:
    image: influxdb:2.7.5
    container_name: rootly-influxdb
    restart: unless-stopped
    ports:
      - "${INFLUXDB_PORT:-8086}:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - ./influxdb/init:/docker-entrypoint-initdb.d
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=${DOCKER_INFLUXDB_INIT_MODE:-setup}
      - DOCKER_INFLUXDB_INIT_USERNAME=${DOCKER_INFLUXDB_INIT_USERNAME:-admin}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${DOCKER_INFLUXDB_INIT_PASSWORD:-admin123}
      - DOCKER_INFLUXDB_INIT_ORG=${DOCKER_INFLUXDB_INIT_ORG:-rootly}
      - DOCKER_INFLUXDB_INIT_BUCKET=${DOCKER_INFLUXDB_INIT_BUCKET:-agricultural_data}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${DOCKER_INFLUXDB_INIT_ADMIN_TOKEN:-super-secret-influx-token}
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # MinIO - Object Storage (Used by Data Management Backend)
  minio:
    image: minio/minio:latest
    container_name: rootly-minio
    restart: unless-stopped
    ports:
      - "${MINIO_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-admin123}
    command: server /data --console-address ":${MINIO_CONSOLE_PORT:-9001}"
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # PostgreSQL - Relational Database (Used by Authentication Backend)
  postgres:
    image: postgres:15-alpine
    container_name: rootly-postgres
    restart: unless-stopped
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-auth_db}
      - POSTGRES_USER=${POSTGRES_USER:-auth_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin123}
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-auth_user} -d ${POSTGRES_DB:-auth_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # PostgreSQL - Relational Database (Used by User Plant Management Backend)
  postgres-user-plant:
    image: postgres:15-alpine
    container_name: rootly-postgres-user-plant
    restart: unless-stopped
    ports:
      - "${POSTGRES_USER_PLANT_PORT:-5433}:5432"
    volumes:
      - postgres_user_plant_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_USER_PLANT_DB:-rootly}
      - POSTGRES_USER=${POSTGRES_USER_PLANT_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_USER_PLANT_PASSWORD:-admin123}
      - POSTGRES_HOST_AUTH_METHOD=trust
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER_PLANT_USER:-postgres} -d ${POSTGRES_USER_PLANT_DB:-rootly}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # MinIO Auth - Object Storage for Profile Photos (Used by Authentication Backend)
  minio-auth:
    image: minio/minio:latest
    container_name: rootly-minio-auth
    restart: unless-stopped
    ports:
      - "${MINIO_AUTH_PORT:-9002}:9000"
      - "${MINIO_AUTH_CONSOLE_PORT:-9003}:9001"
    volumes:
      - minio_auth_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_AUTH_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_AUTH_ROOT_PASSWORD:-admin123}
    command: server /data --console-address ":9001"
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # MinIO User Plant - Object Storage for User Plant Management Backend
  minio-user-plant:
    image: minio/minio:latest
    container_name: rootly-minio-user-plant
    restart: unless-stopped
    ports:
      - "${MINIO_USER_PLANT_PORT:-9004}:9000"
      - "${MINIO_USER_PLANT_CONSOLE_PORT:-9005}:9001"
    volumes:
      - minio_user_plant_data:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_USER_PLANT_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_USER_PLANT_ROOT_PASSWORD:-admin123}
    command: server /data --console-address ":9001"
    networks:
      - rootly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # ============================================================================
  # APPLICATION SERVICES
  # ============================================================================

  # Data Management Backend (Go) - Handles data ingestion and storage
  data-management-backend:
    build:
      context: ../rootly-data-management-backend
      dockerfile: Dockerfile
    container_name: rootly-data-management-backend
    restart: unless-stopped
    ports:
      - "${DATA_MANAGEMENT_EXTERNAL_PORT:-8002}:${SERVERS_INTERNAL_PORT:-8000}"
    depends_on:
      influxdb:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      - rootly-network
    env_file:
      - .env
    environment:
      - HOST_IP=${HOST_IP:-}
      - EXTERNAL_PORT=${DATA_MANAGEMENT_EXTERNAL_PORT:-8002}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${DATA_MANAGEMENT_EXTERNAL_PORT:-8002}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Analytics Backend (Python) - Provides analytics and insights
  analytics-backend:
    build:
      context: ../rootly-analytics-backend
      dockerfile: Dockerfile
    container_name: rootly-analytics-backend
    restart: unless-stopped
    ports:
      - "${ANALYTICS_EXTERNAL_PORT:-8000}:${SERVERS_INTERNAL_PORT:-8000}"
    depends_on:
      influxdb:
        condition: service_healthy
    networks:
      - rootly-network
    env_file:
      - .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Authentication Backend (Python) - Handles user authentication and management
  authentication-backend:
    build:
      context: ../rootly-authentication-and-roles-backend
      dockerfile: Dockerfile
    container_name: rootly-authentication-backend
    restart: unless-stopped
    ports:
      - "${AUTH_EXTERNAL_PORT:-8001}:${SERVERS_INTERNAL_PORT:-8000}"
    depends_on:
      postgres:
        condition: service_healthy
      minio-auth:
        condition: service_healthy
    networks:
      - rootly-network
    env_file:
      - .env
    environment:
      - MINIO_ENDPOINT=minio-auth:9000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVERS_INTERNAL_PORT:-8000}/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # User Plant Management Backend (Python) - Handles user plant management
  user-plant-management-backend:
    build:
      context: ../rootly-user-plant-management-backend
      dockerfile: Dockerfile
    container_name: rootly-user-plant-management-backend
    restart: unless-stopped
    ports:
      - "${USER_PLANT_MANAGEMENT_EXTERNAL_PORT:-8003}:8000"
    depends_on:
      postgres-user-plant:
        condition: service_healthy
      minio-user-plant:
        condition: service_healthy
    networks:
      - rootly-network
    env_file:
      - .env
    environment:
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER_PLANT_USER:-postgres}:${POSTGRES_USER_PLANT_PASSWORD:-admin123}@postgres-user-plant:5432/${POSTGRES_USER_PLANT_DB:-rootly}
      - MINIO_ENDPOINT=minio-user-plant:9000
      - MINIO_ACCESS_KEY=${MINIO_USER_PLANT_ROOT_USER:-admin}
      - MINIO_SECRET_KEY=${MINIO_USER_PLANT_ROOT_PASSWORD:-admin123}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Frontend (React) - User interface for the agricultural monitoring platform
  frontend:
    build:
      context: ../rootly-frontend
      dockerfile: Dockerfile
    container_name: rootly-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_EXTERNAL_PORT:-3000}:3000"
    networks:
      - rootly-network
    environment:
      - NODE_ENV=production
      - PORT=3000
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

# ============================================================================
# VOLUMES
# ============================================================================

volumes:
  influxdb_data:
    driver: local
  minio_data:
    driver: local
  postgres_data:
    driver: local
  minio_auth_data:
    driver: local
  postgres_user_plant_data:
    driver: local
  minio_user_plant_data:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================

networks:
  rootly-network:
    driver: bridge
    name: rootly-network
